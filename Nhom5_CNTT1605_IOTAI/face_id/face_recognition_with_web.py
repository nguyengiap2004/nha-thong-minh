
import cv2
import serial
import threading
import time
import requests
from flask import Flask, render_template_string, request, jsonify

# --- C·∫§U H√åNH Pushover ---
PUSHOVER_USER_KEY = "ukiakn1dh7fp8z7y3gmmyx82egpgq4"
PUSHOVER_API_TOKEN = "abwcwnpgqkwa51pyy1j6a1yf3y8t1j"

# --- C·∫§U H√åNH SERIAL CHO ARDUINO ---
ser = serial.Serial('COM8', 9600, timeout=1)
time.sleep(2)  # Ch·ªù Arduino kh·ªüi ƒë·ªông

# --- KH·ªûI T·∫†O FLASK APP ---
app = Flask(__name__)

# Bi·∫øn to√†n c·ª•c l∆∞u tr·∫°ng th√°i c·ª≠a v√† c·∫£nh b√°o gas
servo_open = False
gas_detected = False

def send_pushover_notification(message):
    """G·ª≠i tin nh·∫Øn c·∫£nh b√°o qua Pushover"""
    url = "https://api.pushover.net/1/messages.json"
    data = {
        "token": PUSHOVER_API_TOKEN,
        "user": PUSHOVER_USER_KEY,
        "message": message,
        "title": "üö® C·∫¢NH B√ÅO GAS üö®"
    }
    requests.post(url, data=data)

@app.route('/')
def index():
    return render_template_string('''
        <!doctype html>
        <html>
        <head>
            <title>Qu·∫£n l√Ω c·ª≠a</title>
            <script>
                function toggleServo() {
                    fetch('/toggle', { method: 'POST' })
                        .then(response => response.json())
                        .then(data => updateUI(data.status));
                }

                function updateUI(status) {
                    document.getElementById("servo-status").innerText = status;
                    let btn = document.getElementById("toggle-btn");
                    btn.innerText = status === "M·ªü" ? "ƒê√≥ng c·ª≠a" : "M·ªü c·ª≠a";
                }

                function checkStatus() {
                    fetch('/status')
                        .then(response => response.json())
                        .then(data => updateUI(data.status));
                }

                setInterval(checkStatus, 2000);
            </script>
        </head>
        <style>
            body {
            text-align: center;
            }
            button {
            font-size: 18px;
            padding: 15px 30px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            color: black;
            transition: 0.3s;
        }
        
        </style>
        <body>
            <h1>ƒêi·ªÅu khi·ªÉn c·ª≠a nh√†</h1>
            <p>Tr·∫°ng th√°i c·ª≠a nh√†: <span id="servo-status">{{ status }}</span></p>
            <button id="toggle-btn" onclick="toggleServo()">
                {% if status == 'M·ªü' %} ƒê√≥ng c·ª≠a {% else %} M·ªü c·ª≠a {% endif %}
            </button>
        </body>
        </html>
    ''', status="M·ªü" if servo_open else "ƒê√≥ng")

@app.route('/toggle', methods=['POST'])
def toggle_servo():
    global servo_open
    if servo_open:
        ser.write(b'0')  # ƒê√≥ng c·ª≠a
        servo_open = False
    else:
        ser.write(b'1')  # M·ªü c·ª≠a
        servo_open = True
    return jsonify({"status": "M·ªü" if servo_open else "ƒê√≥ng"})

@app.route('/status', methods=['GET'])
def get_status():
    return jsonify({"status": "M·ªü" if servo_open else "ƒê√≥ng"})

@app.route('/update_status', methods=['POST'])
def update_status():
    """C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ª≠a m√† kh√¥ng k√≠ch ho·∫°t toggle"""
    global servo_open
    data = request.get_json()
    servo_open = data.get("status") == "M·ªü"
    return jsonify({"status": "M·ªü" if servo_open else "ƒê√≥ng"})

def listen_arduino():
    """L·∫Øng nghe t√≠n hi·ªáu t·ª´ Arduino"""
    global gas_detected
    while True:
        if ser.in_waiting > 0:
            line = ser.readline().decode('utf-8').strip()
            print("Arduino:", line)
            
            if line == "GAS_DETECTED":
                if not gas_detected:
                    gas_detected = True
                    print("‚ö†Ô∏è C·∫¢NH B√ÅO: Ph√°t hi·ªán kh√≠ gas! G·ª≠i tin nh·∫Øn...")
                    send_pushover_notification("‚ö†Ô∏è C·∫¢NH B√ÅO: Ph√°t hi·ªán kh√≠ gas nguy hi·ªÉm! H√£y ki·ªÉm tra ngay.")
            elif line == "GAS_CLEARED":
                gas_detected = False
                print("‚úÖ Kh√¥ng c√≤n kh√≠ gas.")

def face_recognition_loop():
    """Nh·∫≠n di·ªán khu√¥n m·∫∑t ƒë·ªÉ ƒëi·ªÅu khi·ªÉn servo"""
    global servo_open

    recognizer = cv2.face.LBPHFaceRecognizer_create()
    recognizer.read("face_model.yml")
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

    cap = cv2.VideoCapture(0)

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Kh√¥ng l·∫•y ƒë∆∞·ª£c khung h√¨nh t·ª´ camera.")
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(100, 100))

        for (x, y, w, h) in faces:
            face_crop = gray[y:y+h, x:x+w]
            label, confidence = recognizer.predict(face_crop)

            if confidence < 50:
                if not servo_open:
                    print("Khu√¥n m·∫∑t h·ª£p l·ªá! M·ªü c·ª≠a.")
                    ser.write(b'1')
                    servo_open = True
                    requests.post('http://127.0.0.1:5000/update_status', json={"status": "M·ªü"})

                break  # Tho√°t loop sau khi nh·∫≠n di·ªán th√†nh c√¥ng

        for (x, y, w, h) in faces:
            color = (0, 255, 0) if servo_open else (0, 0, 255)
            cv2.rectangle(frame, (x, y), (x+w, y+h), color, 2)

        cv2.imshow("Face Recognition", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == '__main__':
    # Kh·ªüi ƒë·ªông Flask trong lu·ªìng ri√™ng
    flask_thread = threading.Thread(target=app.run, kwargs={'host': '0.0.0.0', 'port': 5000, 'debug': False}, daemon=True)
    flask_thread.start()

    # Kh·ªüi ƒë·ªông lu·ªìng l·∫Øng nghe Arduino
    arduino_thread = threading.Thread(target=listen_arduino, daemon=True)
    arduino_thread.start()

    # Ch·∫°y nh·∫≠n di·ªán khu√¥n m·∫∑t
    face_recognition_loop()

    # ƒê√≥ng Serial khi tho√°t
    ser.close()

